{
    "status": "fail",
    "version": 2,
    "tests": [
        {
            "name": "ComplexNumber <: Number",
            "test_code": "@test ComplexNumber <: Number",
            "status": "pass"
        },
        {
            "name": "ComplexNumber(0, 1) ^ 2 == ComplexNumber(-1, 0)",
            "test_code": "@test ComplexNumber(0, 1) ^ 2 == ComplexNumber(-1, 0)",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Addition",
            "test_code": "@test ComplexNumber(1, 0) + ComplexNumber(2, 0) == ComplexNumber(3, 0)\n@test ComplexNumber(0, 1) + ComplexNumber(0, 2) == ComplexNumber(0, 3)\n@test ComplexNumber(1, 2) + ComplexNumber(3, 4) == ComplexNumber(4, 6)",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Subtraction",
            "test_code": "@test ComplexNumber(1, 0) - ComplexNumber(2, 0) == ComplexNumber(-1, 0)\n@test ComplexNumber(0, 1) - ComplexNumber(0, 2) == ComplexNumber(0, -1)\n@test ComplexNumber(1, 2) - ComplexNumber(3, 4) == ComplexNumber(-2, -2)",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Multiplication",
            "test_code": "@test ComplexNumber(1, 0) * ComplexNumber(2, 0) == ComplexNumber(2, 0)\n@test ComplexNumber(0, 1) * ComplexNumber(0, 2) == ComplexNumber(-2, 0)\n@test ComplexNumber(1, 2) * ComplexNumber(3, 4) == ComplexNumber(-5, 10)",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Division",
            "test_code": "@test ComplexNumber(1, 0) / ComplexNumber(2, 0) == ComplexNumber(0.5, 0)\n@test ComplexNumber(0, 1) / ComplexNumber(0, 2) == ComplexNumber(0.5, 0)\n@test ComplexNumber(1, 2) / ComplexNumber(3, 4) ≈ ComplexNumber(0.44, 0.08)",
            "status": "pass"
        },
        {
            "name": "Absolute value",
            "test_code": "@test abs(ComplexNumber(5, 0)) == 5\n@test abs(ComplexNumber(-5, 0)) == 5\n@test abs(ComplexNumber(0, 5)) == 5\n@test abs(ComplexNumber(0, -5)) == 5\n@test abs(ComplexNumber(3, 4)) == 5",
            "status": "pass"
        },
        {
            "name": "Complex conjugate",
            "test_code": "@test conj(ComplexNumber(5.0, 0.0)) == ComplexNumber(5.0, 0.0)\n@test conj(ComplexNumber(0, 5)) == ComplexNumber(0, -5)\n@test conj(ComplexNumber(1, 1)) == ComplexNumber(1, -1)",
            "status": "pass"
        },
        {
            "name": "Real part",
            "test_code": "@test real(ComplexNumber(1, 0)) == 1\n@test real(ComplexNumber(0, 1)) == 0\n@test real(ComplexNumber(1, 2)) == 1",
            "status": "pass"
        },
        {
            "name": "Imaginary part",
            "test_code": "@test imag(ComplexNumber(1, 0)) == 0\n@test imag(ComplexNumber(0, 1)) == 1\n@test imag(ComplexNumber(1, 2)) == 2",
            "status": "pass"
        },
        {
            "name": "Complex exponential.1",
            "test_code": "@test exp(ComplexNumber(0, π)) ≈ ComplexNumber(-1, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:44\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:383\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:377\n  [4] promote\n    @ ./promotion.jl:360 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:389\n  [6] exp(x::ExercismTestReports.ComplexNumber{Float64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:63 [inlined]\n  [9] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.2",
            "test_code": "@test exp(ComplexNumber(0, 0)) == ComplexNumber(1, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:44\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:383\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:377\n  [4] promote\n    @ ./promotion.jl:360 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:389\n  [6] exp(x::ExercismTestReports.ComplexNumber{Int64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:64 [inlined]\n  [9] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.3",
            "test_code": "@test exp(ComplexNumber(1, 0)) ≈ ComplexNumber(ℯ, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:44\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:383\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:377\n  [4] promote\n    @ ./promotion.jl:360 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:389\n  [6] exp(x::ExercismTestReports.ComplexNumber{Int64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:65 [inlined]\n  [9] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.4",
            "test_code": "@test exp(ComplexNumber(log(2), π)) ≈ ComplexNumber(-2, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:44\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:383\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:377\n  [4] promote\n    @ ./promotion.jl:360 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:389\n  [6] exp(x::ExercismTestReports.ComplexNumber{Float64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:66 [inlined]\n  [9] macro expansion\n    @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Syntax sugar jm » 2 tests",
            "test_code": "@test ComplexNumber(0, 1) == jm\n@test ComplexNumber(-1, 0) == jm ^ 2",
            "status": "pass"
        },
        {
            "name": "Syntax sugar jm.2",
            "test_code": "@test ComplexNumber(1, 0) == 1 + 0jm",
            "status": "error",
            "message": "promotion of types Int64 and ExercismTestReports.ComplexNumber{Bool} failed to change any arguments\nStacktrace:\n [1] error(::String, ::String, ::String)\n   @ Base ./error.jl:44\n [2] sametype_error(input::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:383\n [3] not_sametype(x::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}}, y::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:377\n [4] promote\n   @ ./promotion.jl:360 [inlined]\n [5] *(x::Int64, y::ExercismTestReports.ComplexNumber{Bool})\n   @ Base ./promotion.jl:389\n [6] macro expansion\n   @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n [7] macro expansion\n   @ ./runtests.jl:72 [inlined]\n [8] macro expansion\n   @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [9] top-level scope\n   @ ./runtests.jl:71"
        },
        {
            "name": "Syntax sugar jm.3",
            "test_code": "@test ComplexNumber(1, 1) == 1 + 1jm",
            "status": "error",
            "message": "promotion of types Int64 and ExercismTestReports.ComplexNumber{Bool} failed to change any arguments\nStacktrace:\n [1] error(::String, ::String, ::String)\n   @ Base ./error.jl:44\n [2] sametype_error(input::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:383\n [3] not_sametype(x::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}}, y::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:377\n [4] promote\n   @ ./promotion.jl:360 [inlined]\n [5] *(x::Int64, y::ExercismTestReports.ComplexNumber{Bool})\n   @ Base ./promotion.jl:389\n [6] macro expansion\n   @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]\n [7] macro expansion\n   @ ./runtests.jl:73 [inlined]\n [8] macro expansion\n   @ /usr/local/julia/share/julia/stdlib/v1.8/Test/src/Test.jl:1363 [inlined]\n [9] top-level scope\n   @ ./runtests.jl:71"
        },
        {
            "name": "Syntax sugar jm.5",
            "test_code": "@test false",
            "status": "fail",
            "message": "Test Failed at ./runtests.jl:77\n  Expression: false"
        },
        {
            "name": "Syntax sugar jm.6",
            "test_code": "@test false",
            "status": "fail",
            "message": "Test Failed at ./runtests.jl:77\n  Expression: false"
        },
        {
            "name": "Syntax sugar jm.7",
            "test_code": "@test false",
            "status": "fail",
            "message": "Test Failed at ./runtests.jl:77\n  Expression: false"
        }
    ]
}
