{
    "status": "fail",
    "version": 2,
    "tests": [
        {
            "name": "ComplexNumber <: Number",
            "status": "pass"
        },
        {
            "name": "ComplexNumber(0, 1) ^ 2 == ComplexNumber(-1, 0)",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Addition",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Subtraction",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Multiplication",
            "status": "pass"
        },
        {
            "name": "Arithmetic » Division",
            "status": "pass"
        },
        {
            "name": "Absolute value",
            "status": "pass"
        },
        {
            "name": "Complex conjugate",
            "status": "pass"
        },
        {
            "name": "Real part",
            "status": "pass"
        },
        {
            "name": "Imaginary part",
            "status": "pass"
        },
        {
            "name": "Complex exponential.1",
            "test_code": "@test exp(ComplexNumber(0, π)) ≈ ComplexNumber(-1, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:42\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:374\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:368\n  [4] promote\n    @ ./promotion.jl:351 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:380\n  [6] exp(x::ExercismTestReports.ComplexNumber{Float64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:63 [inlined]\n  [9] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.2",
            "test_code": "@test exp(ComplexNumber(0, 0)) == ComplexNumber(1, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:42\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:374\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:368\n  [4] promote\n    @ ./promotion.jl:351 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:380\n  [6] exp(x::ExercismTestReports.ComplexNumber{Int64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:64 [inlined]\n  [9] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.3",
            "test_code": "@test exp(ComplexNumber(1, 0)) ≈ ComplexNumber(ℯ, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:42\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:374\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:368\n  [4] promote\n    @ ./promotion.jl:351 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:380\n  [6] exp(x::ExercismTestReports.ComplexNumber{Int64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:65 [inlined]\n  [9] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Complex exponential.4",
            "test_code": "@test exp(ComplexNumber(log(2), π)) ≈ ComplexNumber(-2, 0)",
            "status": "error",
            "message": "promotion of types Float64 and ExercismTestReports.ComplexNumber{Float64} failed to change any arguments\nStacktrace:\n  [1] error(::String, ::String, ::String)\n    @ Base ./error.jl:42\n  [2] sametype_error(input::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:374\n  [3] not_sametype(x::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}}, y::Tuple{Float64, ExercismTestReports.ComplexNumber{Float64}})\n    @ Base ./promotion.jl:368\n  [4] promote\n    @ ./promotion.jl:351 [inlined]\n  [5] *(x::Float64, y::ExercismTestReports.ComplexNumber{Float64})\n    @ Base ./promotion.jl:380\n  [6] exp(x::ExercismTestReports.ComplexNumber{Float64})\n    @ ExercismTestReports ./complex-numbers.jl:53\n  [7] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n  [8] macro expansion\n    @ ./runtests.jl:66 [inlined]\n  [9] macro expansion\n    @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [10] top-level scope\n    @ ./runtests.jl:63"
        },
        {
            "name": "Syntax sugar jm » 2 tests",
            "status": "pass"
        },
        {
            "name": "Syntax sugar jm.2",
            "test_code": "@test ComplexNumber(1, 0) == 1 + 0jm",
            "status": "error",
            "message": "promotion of types Int64 and ExercismTestReports.ComplexNumber{Bool} failed to change any arguments\nStacktrace:\n [1] error(::String, ::String, ::String)\n   @ Base ./error.jl:42\n [2] sametype_error(input::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:374\n [3] not_sametype(x::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}}, y::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:368\n [4] promote\n   @ ./promotion.jl:351 [inlined]\n [5] *(x::Int64, y::ExercismTestReports.ComplexNumber{Bool})\n   @ Base ./promotion.jl:380\n [6] macro expansion\n   @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [7] macro expansion\n   @ ./runtests.jl:72 [inlined]\n [8] macro expansion\n   @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [9] top-level scope\n   @ ./runtests.jl:71"
        },
        {
            "name": "Syntax sugar jm.3",
            "test_code": "@test ComplexNumber(1, 1) == 1 + 1jm",
            "status": "error",
            "message": "promotion of types Int64 and ExercismTestReports.ComplexNumber{Bool} failed to change any arguments\nStacktrace:\n [1] error(::String, ::String, ::String)\n   @ Base ./error.jl:42\n [2] sametype_error(input::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:374\n [3] not_sametype(x::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}}, y::Tuple{Int64, ExercismTestReports.ComplexNumber{Bool}})\n   @ Base ./promotion.jl:368\n [4] promote\n   @ ./promotion.jl:351 [inlined]\n [5] *(x::Int64, y::ExercismTestReports.ComplexNumber{Bool})\n   @ Base ./promotion.jl:380\n [6] macro expansion\n   @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [7] macro expansion\n   @ ./runtests.jl:73 [inlined]\n [8] macro expansion\n   @ /usr/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [9] top-level scope\n   @ ./runtests.jl:71"
        }
    ]
}
